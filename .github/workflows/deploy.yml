name: CI/CD with Terraform
on:
  push:
    branches:
      - main

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_STATE_BUCKET_NAME: ${{ secrets.AWS_TF_STATE_BUCKET_NAME }}
  PRIVATE_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
  PUBLIC_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PUBLIC }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_KEY_PAIR_NAME: ${{ secrets.AWS_KEY_PAIR_NAME }}
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  GOOGLE_TRANSLATE_API_KEY: ${{ secrets.GOOGLE_TRANSLATE_API_KEY }}
  ENV: ${{ secrets.ENV }}
  TINDOORI_USE_LOCAL: ${{ secrets.TINDOORI_USE_LOCAL }}
  POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  PORT: ${{ secrets.PORT }}
  AWS_IMAGES_BUCKET: ${{ secrets.AWS_IMAGES_BUCKET }}
jobs:
  deploy-infra:
    runs-on: ubuntu-latest
    outputs:
      SERVER_PUBLIC_IP: ${{ steps.set-server-ip.outputs.app_instance_ip_addr}}
      POSTGRES_HOST: ${{ steps.set-db-ip.outputs.db_instance_ip_addr}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=$TF_STATE_BUCKET_NAME" -backend-config="region=$AWS_REGION"
        working-directory: ./terraform
      - name: Terraform Plan
        id: plan
        run: |-
          terraform plan \
          -var="aws_region=$AWS_REGION" \
          -var="public_key=$PUBLIC_SSH_KEY" \
          -var="private_key=$PRIVATE_SSH_KEY" \
          -var="key_name=$AWS_KEY_PAIR_NAME" \
          -out=PLAN
        working-directory: ./terraform
      - name: Terraform Apply
        id: apply
        run: terraform apply PLAN
        working-directory: ./terraform
      - name: Set server ip address
        id: set-server-ip
        run: |-
          echo "::set-output name=app_instance_ip_addr::$(terraform output app_instance_ip_addr)"
        working-directory: ./terraform
      - name: Set db ip address
        id: set-db-ip
        run: |-
          echo "::set-output name=db_instance_ip_addr::$(terraform output db_instance_ip_addr)"
        working-directory: ./terraform
  deploy-app:
    runs-on: ubuntu-latest
    needs: deploy-infra
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set Server IP env variable
        run: echo SERVER_PUBLIC_IP=${{ needs.deploy-infra.outputs.SERVER_PUBLIC_IP }} >> $GITHUB_ENV
      - name: Set DB IP env variable
        run: echo POSTGRES_HOST=${{ needs.deploy-infra.outputs.POSTGRES_HOST }} >> $GITHUB_ENV
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, push docker image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: tindoori-app
          IMAGE_TAG: ${{ github.sha }}
        run: |-
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        working-directory: ./
      - name: Deploy docker image to EC2
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: tindoori-app
          IMAGE_TAG: ${{ github.sha }}
          AWS_DEFAULT_REGION: us-east-1
          DATABASE_URL: postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@${{ env.POSTGRES_HOST }}:$POSTGRES_PORT/$POSTGRES_DB
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_PUBLIC_IP }}
          username: ubuntu
          key: ${{ env.PRIVATE_SSH_KEY }}
          envs: PRIVATE_SSH_KEY,REGISTRY,REPOSITORY,IMAGE_TAG,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_DEFAULT_REGION,AWS_REGION, POSTGRES_HOST
          script: |-
            sudo apt update
            sudo apt install docker.io -y
            sudo service docker restart
            sudo service docker start
            sudo apt install awscli -y
            sudo $(aws ecr get-login --no-include-email --region us-east-1);
            sudo docker stop myappcontainer || true
            sudo docker rm myappcontainer || true
            sudo docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG
            sudo docker run -d --name myappcontainer \ 
            -e DATABASE_URL=$DATABASE_URL \
            -e GOOGLE_TRANSLATE_API_KEY=$GOOGLE_TRANSLATE_API_KEY \
            -e ENV=$ENV \
            -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
            -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
            -e AWS_IMAGES_BUCKET=$AWS_IMAGES_BUCKET \
            -e TINDOORI_USE_LOCAL=$TINDOORI_USE_LOCAL \
            -e POSTGRES_HOST=$POSTGRES_HOST \
            -e POSTGRES_PORT=$POSTGRES_PORT \
            -e POSTGRES_DB=$POSTGRES_DB \
            -e POSTGRES_USER=$POSTGRES_USER \
            -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD \
            -e JWT_SECRET=$JWT_SECRET \
            -e PORT=$PORT \
            -p $PORT:$PORT $REGISTRY/$REPOSITORY:$IMAGE_TAG